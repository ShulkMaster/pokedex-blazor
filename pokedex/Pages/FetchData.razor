@page "/fetchdata"
@using Pokedex.Api
@using Pokedex.Api.Responses
@inject PokeApi _api

<PageTitle>Pokemon</PageTitle>

<h1>Pokemones</h1>

@if (_hasError)
{
  <p>
    <em>error</em>
  </p>
}
else
{
  <p>@_pokemons.Count</p>
  <ul class="list-group">
    @foreach (var (name, url) in _pokemons)
    {
      <li class="list-group-item">
        <div class="card">
          <div class="card-header">
            Pokemon
          </div>
          <div class="card-body">
            <h5 class="card-title">@name</h5>
            <p class="card-text">@url</p>
          </div>
        </div>
      </li>
    }
  </ul>
}

@code {

  private readonly List<PokemonResource> _pokemons = new(500);
  bool _hasError;

  protected override async Task OnInitializedAsync()
  {
    var pokemons = await _api.Get<Pagination<PokemonResource>>(Endpoint.Pokemon.Index);

    switch (pokemons)
    {
      case Result<Pagination<PokemonResource>>.Success success:
        Console.WriteLine(success.Value.Count);
        _pokemons.AddRange(success.Value.Results);
        break;
      case Result<Pagination<PokemonResource>>.Failure:
        _hasError = true;
        break;
    }
  }

}